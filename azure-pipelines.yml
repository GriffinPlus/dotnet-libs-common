trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master

variables:
  BuildConfiguration: 'Release'

pool:
  vmImage: 'windows-2019'

stages:

########################################################################################################################
# Stage: Build
########################################################################################################################
- stage: 'Build'
  jobs:
  ######################################################################################################################
  # Job: Build
  ######################################################################################################################
  - job: 'Build'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core 2.1 SDK'
      inputs:
        packageType: 'sdk'
        version: '2.1.x'
        performMultiLevelLookup: true
        installationPath: '$(Agent.ToolsDirectory)/dotnet'
    - task: UseDotNet@2
      displayName: 'Use .NET Core 3.1 SDK'
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
        performMultiLevelLookup: true
        installationPath: '$(Agent.ToolsDirectory)/dotnet'
    - task: DotNetCoreCLI@2
      displayName: 'Install GitVersion'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install -g gitversion.tool'
    - task: DotNetCoreCLI@2
      displayName: 'Show GitVersion Version'
      inputs:
        command: 'custom'
        custom: 'gitversion'
        arguments: 'version'
    - task: DotNetCoreCLI@2
      name: 'GitVersion'
      displayName: 'Run GitVersion'
      inputs:
        command: 'custom'
        custom: 'gitversion'
        arguments: '/output buildserver /updateassemblyinfo src/CommonAssemblyInfo.cs'
    - task: DotNetCoreCLI@2
      displayName: 'Restore'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration) /p:InformationalVersion=$(GitVersion.InformationalVersion)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'GitVersion.SemVer'
    - task: PowerShell@2
      displayName: Export Shared Variables
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          New-Item -ItemType Directory -Force -Path '$(Pipeline.Workspace)/variables'
          Set-Location -Path '$(Pipeline.Workspace)/variables'
          '$(GitVersion.NuGetVersion)' | Out-File GitVersion.NuGetVersion -NoNewLine
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifacts'
      inputs:
        targetPath: '$(Build.SourcesDirectory)/_build'
        artifactName: 'Binaries'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Shared Variables'
      inputs:
        targetPath: '$(Pipeline.Workspace)/variables'
        artifactName: 'Variables'

########################################################################################################################
# Stage: Tests
########################################################################################################################
- stage: 'Tests'
  jobs:
  ######################################################################################################################
  # Job: Tests for .NET 4.6.1 on Windows
  ######################################################################################################################
  - job:
    displayName: 'Test (Windows, .NET 4.6.1)'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifacts'
      inputs:
        artifact: 'Binaries'
        targetPath: '$(Build.SourcesDirectory)/_build'
        itemPattern: |
          **/net461/*.*
    - task: VSTest@2
      displayName: 'Test'
      inputs:
        configuration: '$(buildConfiguration)'
        testSelector: 'testAssemblies'
        codeCoverageEnabled: true
        testAssemblyVer2: |
          **\*.Tests.dll
          !**\obj\**
        searchFolder: '$(Build.SourcesDirectory)'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6.1'

  ######################################################################################################################
  # Job: Tests for .NET Core 2.1/3.1 on Windows and Linux
  ######################################################################################################################
  - job:
    displayName: Test
    strategy:
      matrix:
        (Windows, .NET Core 2.1):
          VmImage: windows-2019
          DotNetCoreVersion: '2.1'
        (Windows, .NET Core 3.1):
          VmImage: windows-2019
          DotNetCoreVersion: '3.1'
        # (Ubuntu, .NET Core 2.1):
        #   VmImage: ubuntu-20.04
        #   DotNetCoreVersion: '2.1'
        (Ubuntu, .NET Core 3.1):
          VmImage: ubuntu-20.04
          DotNetCoreVersion: '3.1'
    pool:
      vmImage: '$(VmImage)'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core $(DotNetCoreVersion) SDK'
      inputs:
        packageType: 'sdk'
        version: '$(DotNetCoreVersion).x'
        performMultiLevelLookup: true
        installationPath: '$(Agent.ToolsDirectory)/dotnet'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifacts'
      inputs:
        artifact: 'Binaries'
        targetPath: '$(Build.SourcesDirectory)/_build'
    - task: DotNetCoreCLI@2
      displayName: 'Test'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        nobuild: true
        arguments: '--configuration $(buildConfiguration) --framework netcoreapp$(DotNetCoreVersion)'

########################################################################################################################
# Stage: Deployment
########################################################################################################################
- stage: 'Deployment'
  jobs:
  ######################################################################################################################
  # Job: Pack
  ######################################################################################################################
  - job: 'Pack'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifacts'
      inputs:
        artifact: 'Binaries'
        targetPath: '$(Build.SourcesDirectory)/_build'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifacts'
      inputs:
        artifact: 'Variables'
        targetPath: '$(Pipeline.Workspace)/variables'
    - task: PowerShell@2
      displayName: Import Shared Variables
      inputs:
        targetType: 'inline'
        pwsh: true
        workingDirectory: '$(Pipeline.Workspace)/variables'
        script: |
          foreach ( $file in Get-ChildItem ) {
            $value = Get-Content $($file.FullName) -Raw
            Write-Host "Setting variable '$($file.Name)' = '$value'"
            Write-Host "##vso[task.setvariable variable=$($file.Name)]$value";
          }
    - task: PowerShell@2
      displayName: 'Pack'
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |
          foreach ( $file in Get-ChildItem -Include *.nuspec -Recurse ) {
            Write-Host "Processing file $($file.FullName)..."
            nuget.exe pack `
              "$($file.FullName)" `
              -Symbols `
              -SymbolPackageFormat snupkg `
              -Properties version=$(GitVersion.NuGetVersion) `
              -OutputDirectory "$(Build.ArtifactStagingDirectory)" `
              -Verbosity detailed
            if ($lastexitcode -ne 0) { throw("Creating nuget package failed.") }
          }
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifacts'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'Packages'

  ######################################################################################################################
  # Job: Publish
  ######################################################################################################################
  - job:
    displayName: 'Publish'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')
    dependsOn: 'Pack'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifacts'
      inputs:
        artifact: 'Packages'
        targetPath: '$(Build.ArtifactStagingDirectory)'
    - task: NuGetCommand@2
      displayName: 'Publish'
      inputs:
        command: 'push'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'nuget.org'
